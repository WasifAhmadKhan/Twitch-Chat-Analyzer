{"version":3,"sources":["NavBar.js","component/Chat.js","component/Poll.js","component/Users.js","Twich.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","className","href","type","id","Component","chat","this","props","msg","subscriber","filter","message","tgs","map","i","style","color","body","Poll","msgCount","height","width","overflow","backgroundColor","Object","entries","sort","a","b","element","slice","Users","userCount","tmi","require","Twich","client","Client","startFetch","channels","state","channel","connect","on","tags","self","setState","startpoll","stopFetch","disconnect","startPoll","stoptPoll","resetPoll","handleChange","event","target","value","toggleSub","node","scrollTop","scrollHeight","placeholder","onChange","disabled","onClick","role","htmlFor","ref","App","document","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2PAEqBA,E,4JACjB,WACI,OACI,8BACI,qBAAKC,UAAU,8CAAf,SACI,sBAAKA,UAAU,kBAAf,UACI,mBAAGA,UAAU,eAAeC,KAAK,IAAjC,kCACA,wBAAQD,UAAU,iBAAiBE,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACI,sBAAMF,UAAU,0BAEpB,qBAAKA,UAAU,2BAA2BG,GAAG,yBAA7C,SACI,oBAAIH,UAAU,kCAAd,SACI,oBAAIA,UAAU,WAAd,SACI,mBAAGA,UAAU,kBAAkB,eAAa,OAAOC,KAAK,IAAxD,mC,GAbAG,a,+BCAfC,E,4JACjB,WACI,MAAuBC,KAAKC,MAAvBC,EAAL,EAAKA,IAAIC,EAAT,EAASA,WAET,OACI,+BACoB,IAAbA,EAAkBD,EAAIE,QAAO,SAACC,GAAD,OAAuC,IAA5BA,EAAQC,IAAR,cAAkCC,KAAI,SAACF,EAAQG,GAAT,OACrE,qBAAId,UAAU,wCAAd,UAA+D,8BAAG,uBAAMe,MAAO,CAACC,MAAML,EAAQC,IAAR,OAApB,UAA4CD,EAAQC,IAAI,gBAAxD,QAAH,OAA/D,IAA0JD,EAAQM,OAAtGH,MACjEN,EAAIK,KAAI,SAACF,EAAQG,GAAT,OACH,qBAAId,UAAU,wCAAd,UAA+D,8BAAG,uBAAMe,MAAO,CAACC,MAAML,EAAQC,IAAR,OAApB,UAA4CD,EAAQC,IAAI,gBAAxD,QAAH,OAA/D,IAA0JD,EAAQM,OAAtGH,Y,GATtDV,aCAbc,E,4JAEjB,WACI,IAAOC,EAAab,KAAKC,MAAlBY,SAOP,OACI,8BACQ,oBAAInB,UAAU,mBAAmBe,MAR7B,CACZK,OAAQ,QACRC,MAAO,QACPC,SAAU,SACVC,gBAAkB,QAIV,SACMC,OAAOC,QAAQN,GAAUO,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE,GAAKD,EAAE,MAAId,KAAI,SAACgB,EAASf,GACjE,OAAO,qBAAId,UAAU,wCAAd,UAA8D,8BAAI6B,EAAQ,GAAZ,SAA9D,IAAsFA,EAAQ,KAAnCf,MACnEgB,MAAM,EAAG,Y,GAfF1B,aCAb2B,E,4JACjB,WACI,IAAOC,EAAc1B,KAAKC,MAAnByB,UAOP,OACI,8BACA,oBAAIhC,UAAU,mBAAmBe,MARrB,CACZK,OAAQ,QACRC,MAAO,QACPC,SAAU,SACVC,gBAAkB,QAIlB,SACMC,OAAOC,QAAQO,GAAWN,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE,GAAKD,EAAE,MAAId,KAAI,SAACgB,EAASf,GAClE,OAAO,oBAAId,UAAU,wCAAd,SAA+D6B,EAAQ,IAAZf,MACnEgB,MAAM,EAAG,W,GAdO1B,aCE7B6B,EAAMC,EAAQ,IACCC,E,kDAGjB,aAAe,IAAD,8BACV,gBAHJC,OAAS,IAAIH,EAAII,OAEH,EAadC,WAbc,sBAaD,sBAAAX,EAAA,sDACT,EAAKS,OAAOG,SAAW,CAAC,EAAKC,MAAMC,SACnC,EAAKL,OAAOM,UACZ,EAAKN,OAAOO,GAAG,WAAW,SAACF,EAASG,EAAMjC,EAASkC,GACO,qBAA/C,EAAKL,MAAMR,UAAUY,EAAK,iBAAkC,EAAKJ,MAAMR,UAAUY,EAAK,iBAAmB,EAAI,EAAKJ,MAAMR,UAAUY,EAAK,mBAC9I,EAAKE,SACD,CACItC,IAAI,GAAD,mBAAM,EAAKgC,MAAMhC,KAAjB,CAAsB,CAAES,KAAMN,EAASC,IAAKgC,OAMnD,EAAKJ,MAAMO,aACgB,IAAxB,EAAKP,MAAM/B,YACc,IAArBmC,EAAI,aACqC,qBAAjC,EAAKJ,MAAMrB,SAASR,GAA2B,EAAK6B,MAAMrB,SAASR,GAAW,EAAI,EAAK6B,MAAMrB,SAASR,MAGzE,qBAAjC,EAAK6B,MAAMrB,SAASR,GAA2B,EAAK6B,MAAMrB,SAASR,GAAW,EAAI,EAAK6B,MAAMrB,SAASR,SAnBhH,2CAbC,EAsCdqC,UAtCc,sBAsCF,sBAAArB,EAAA,sDAER,EAAKS,OAAOa,aACZ,EAAKT,MAAMrB,SAAW,GACtB,EAAKqB,MAAMR,UAAY,GACvB,EAAKc,SACD,CACItC,IAAK,KAPL,2CAtCE,EAiDd0C,UAjDc,sBAiDF,sBAAAvB,EAAA,sDAER,EAAKmB,SACD,CACIC,WAAW,IAJX,2CAjDE,EAyDdI,UAzDc,sBAyDF,sBAAAxB,EAAA,sDACR,EAAKmB,SACD,CACIC,WAAW,IAHX,2CAzDE,EAgEdK,UAhEc,sBAgEF,sBAAAzB,EAAA,sDACR,EAAKa,MAAMrB,SAAW,GADd,2CAhEE,EAmEdkC,aAnEc,uCAmEC,WAAOC,GAAP,SAAA3B,EAAA,sDACX,EAAKmB,SACD,CACIL,QAASa,EAAMC,OAAOC,QAHnB,2CAnED,wDA2EdC,UA3Ec,sBA2EF,sBAAA9B,EAAA,uDACmB,IAAxB,EAAKa,MAAM/B,YACV,EAAKqC,SACD,CACIrC,YAAW,EACXD,IAAI,KAGZ,EAAKgC,MAAMrB,SAAS,KAGpB,EAAK2B,SACD,CACIrC,YAAW,EACXD,IAAI,KAGZ,EAAKgC,MAAMrB,SAAS,IAjBhB,2CAvER,EAAKqB,MAAQ,CACThC,IAAK,GACLuC,WAAW,EACXN,QAAS,GACTtB,SAAU,GACVV,YAAY,EACZuB,UAAW,IAVL,E,sDA+Fd,WACI1B,KAAKoD,KAAKC,UAAYrD,KAAKoD,KAAKE,e,oBAEpC,WAAU,IAAD,OAUL,OACI,gCACI,uBAAO5D,UAAU,yBAAyBE,KAAK,SAAS2D,YAAY,SAAS,aAAW,SAASC,SAAUxD,KAAK+C,aAActC,MAAO,CAAEM,MAAO,WAC9I,wBAAQ0C,SAAiC,KAAvBzD,KAAKkC,MAAMC,QAA+BvC,KAAK,SAASF,UAAU,qBAAqBgE,QAAS1D,KAAKgC,WAAvH,mBACA,wBAAQyB,SAAiC,KAAvBzD,KAAKkC,MAAMC,QAA+BvC,KAAK,SAASF,UAAU,eAAegE,QAAS1D,KAAK0C,UAAjH,kBACA,sBAAKhD,UAAU,mCAAf,UACI,uBAAOA,UAAU,mBAAmBE,KAAK,WAAW+D,KAAK,SAAS9D,GAAG,yBAAyB2D,SAAUxD,KAAKmD,YAC7G,uBAAOzD,UAAW,8BAA8BkE,QAAQ,yBAAxD,SAAmF5D,KAAKkC,MAAM/B,WAAW,0BAA0B,8BAEvI,sBAAKT,UAAU,mBAAf,0MAGgB,wBAAQ+D,SAAUzD,KAAKkC,MAAMO,WAAoC,KAAvBzC,KAAKkC,MAAMC,QAAgBvC,KAAK,SAASF,UAAU,eAAegE,QAAS1D,KAAK4C,UAA1H,wBAHhB,qBAIgB,wBAAQa,UAAWzD,KAAKkC,MAAMO,WAAoC,KAAvBzC,KAAKkC,MAAMC,QAAgBvC,KAAK,SAASF,UAAU,eAAegE,QAAS1D,KAAK6C,UAA3H,uBAJhB,qBAKgB,wBAAQjD,KAAK,SAASF,UAAU,eAAegE,QAAS1D,KAAK8C,UAA7D,wBALhB,4BAMgB,mBAAGpD,UAAW,8BAAd,kCAEhB,qBAAKA,UAAU,uBAAf,SACI,sBAAKA,UAAU,MAAf,UACI,oBAAIA,UAAU,2BAA2BmE,IAAK,SAACT,GAAD,OAAW,EAAKA,KAAOA,GAAO3C,MA5B5E,CACZK,OAAQ,QACRC,MAAO,QACPC,SAAU,SACVC,gBAAiB,QAwBL,SACI,cAAC,EAAD,CAAMf,IAAKF,KAAKkC,MAAMhC,IAAKC,WAAYH,KAAKkC,MAAM/B,eAEtD,qBAAKT,UAAU,YAAf,SAEI,cAAC,EAAD,CAAMmB,SAAUb,KAAKkC,MAAMrB,aAE/B,qBAAKnB,UAAU,iBAAf,SACI,cAAC,EAAD,CAAOgC,UAAW1B,KAAKkC,MAAMR,0B,GA1ItB5B,aCEdgE,E,kDACnB,aAAc,IAAD,6BACX,eACAC,SAASpD,KAAKF,MAAMQ,gBAAkB,UAF3B,E,0CAIb,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,W,GATyBnB,aCKlBkE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFZ,SAASa,eAAe,SAM1BZ,M","file":"static/js/main.96573242.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                    <div className=\"container-fluid\">\r\n                        <a className=\"navbar-brand\" href=\"/\">Twitch Chat Analyzer</a>\r\n                        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                            <span className=\"navbar-toggler-icon\"></span>\r\n                        </button>\r\n                        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                                <li className=\"nav-item\">\r\n                                    <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class chat extends Component {\r\n    render() {\r\n        let {msg,subscriber} = this.props;\r\n   \r\n        return (\r\n            <div>\r\n                  {subscriber===true?msg.filter((message)=>message.tgs['subscriber']===true).map((message,i)=>(\r\n                            <li className=\" list-group-item list-group-item-dark\"  key={i}><b><span style={{color:message.tgs['color']}}>{message.tgs['display-name']} :</span> </b> {message.body}</li>\r\n                    )):msg.map((message,i)=>(\r\n                            <li className=\" list-group-item list-group-item-dark\"  key={i}><b><span style={{color:message.tgs['color']}}>{message.tgs['display-name']} :</span> </b> {message.body}</li>\r\n                    ))}\r\n                  \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Poll extends Component {\r\n\r\n    render() {\r\n        let {  msgCount } = this.props;\r\n        const mystyle = {\r\n            height: \"350px\",\r\n            width: \"400px\",\r\n            overflow: \"scroll\",\r\n            backgroundColor : \"grey\"\r\n        }\r\n        return (\r\n            <div>\r\n                    <ul className=\" card list-group\" style={mystyle}>\r\n                        { Object.entries(msgCount).sort((a, b) => b[1] - a[1]).map((element, i) => {\r\n                            return <li className=\" list-group-item list-group-item-dark\" key={i}><b>{element[1]} : </b> {element[0]}</li>\r\n                        }).slice(0, 10)}\r\n                    </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Users extends Component {\r\n    render() {\r\n        let {  userCount } = this.props;\r\n        const mystyle = {\r\n            height: \"350px\",\r\n            width: \"400px\",\r\n            overflow: \"scroll\",\r\n            backgroundColor : \"grey\"\r\n        }\r\n        return (\r\n            <div>\r\n            <ul className=\" card list-group\" style={mystyle}>\r\n                { Object.entries(userCount).sort((a, b) => b[1] - a[1]).map((element, i) => {\r\n                    return <li className=\" list-group-item list-group-item-dark\" key={i}>{element[0]}</li>\r\n                }).slice(0, 5)}\r\n            </ul>\r\n    </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Chat from './component/Chat';\r\nimport Poll from './component/Poll';\r\nimport Users from './component/Users';\r\nconst tmi = require('tmi.js');\r\nexport default class Twich extends Component {\r\n    client = new tmi.Client();\r\n\r\n    constructor() {\r\n        super();\r\n\r\n\r\n        this.state = {\r\n            msg: [],\r\n            startpoll: false,\r\n            channel: \"\",\r\n            msgCount: {},\r\n            subscriber: false,\r\n            userCount: {},\r\n        }\r\n    }\r\n    startFetch = async () => {\r\n        this.client.channels = [this.state.channel];\r\n        this.client.connect();\r\n        this.client.on('message', (channel, tags, message, self) => {\r\n            typeof this.state.userCount[tags['display-name']] === 'undefined' ?this.state.userCount[tags['display-name']] = 1 : this.state.userCount[tags['display-name']]++;\r\n            this.setState(\r\n                {\r\n                    msg: [...this.state.msg, { body: message, tgs: tags }],\r\n\r\n                }\r\n            )\r\n            //console.log(tags);\r\n            //console.log(this.state.userCount);\r\n            if (this.state.startpoll) {\r\n                if(this.state.subscriber===true){\r\n                    if(tags['subscriber']===true){\r\n                        typeof this.state.msgCount[message] === 'undefined' ? this.state.msgCount[message] = 1 : this.state.msgCount[message]++;\r\n                    }\r\n                }else{\r\n                    typeof this.state.msgCount[message] === 'undefined' ? this.state.msgCount[message] = 1 : this.state.msgCount[message]++;\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n    stopFetch = async () => {\r\n\r\n        this.client.disconnect();\r\n        this.state.msgCount = {};\r\n        this.state.userCount = {};\r\n        this.setState(\r\n            {\r\n                msg: [],\r\n            }\r\n        )\r\n    }\r\n    startPoll = async () => {\r\n\r\n        this.setState(\r\n            {\r\n                startpoll: true,\r\n            }\r\n        )\r\n    }\r\n    stoptPoll = async () => {\r\n        this.setState(\r\n            {\r\n                startpoll: false,\r\n            }\r\n        )\r\n    }\r\n    resetPoll = async () => {\r\n        this.state.msgCount = {};\r\n    }\r\n    handleChange = async (event) => {\r\n        this.setState(\r\n            {\r\n                channel: event.target.value,\r\n            }\r\n        )\r\n\r\n    }\r\n    toggleSub = async()=>{\r\n        if(this.state.subscriber===false){\r\n            this.setState(\r\n                {\r\n                    subscriber:true,\r\n                    msg:[]\r\n                }\r\n            )\r\n            this.state.msgCount={};\r\n        }\r\n        else{\r\n            this.setState(\r\n                {\r\n                    subscriber:false,\r\n                    msg:[]\r\n                }\r\n            )\r\n            this.state.msgCount={};\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        this.node.scrollTop = this.node.scrollHeight;\r\n    }\r\n    render() {\r\n        const mystyle = {\r\n            height: \"350px\",\r\n            width: \"400px\",\r\n            overflow: \"scroll\",\r\n            backgroundColor: \"grey\",\r\n\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <input className=\"form-control my-2 mx-3\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" onChange={this.handleChange} style={{ width: \"200px\" }} />\r\n                <button disabled={this.state.channel === \"\" ? true : false} type=\"button\" className=\"btn btn-dark mx-3 \" onClick={this.startFetch}>Start</button>\r\n                <button disabled={this.state.channel !== \"\" ? false : true} type=\"button\" className=\"btn btn-dark\" onClick={this.stopFetch}>Stop</button>\r\n                <div className=\"form-check form-switch my-2 mx-3\">\r\n                    <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onChange={this.toggleSub}/>\r\n                    <label className =\"form-check-label text-light\" htmlFor=\"flexSwitchCheckDefault\" >{this.state.subscriber?\"Disable Subscriber Only\":\"Enable Subscriber Only\"}</label>\r\n                </div>\r\n                <div className=\"container  mb-2 \">\r\n                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\n                 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\n                                <button disabled={this.state.startpoll || this.state.channel === \"\"} type=\"button\" className=\"btn btn-dark\" onClick={this.startPoll}>Start Poll</button>&nbsp; &nbsp;&nbsp; &nbsp;\r\n                                <button disabled={!this.state.startpoll || this.state.channel === \"\"} type=\"button\" className=\"btn btn-dark\" onClick={this.stoptPoll}>Stop Poll</button>&nbsp; &nbsp;&nbsp; &nbsp;\r\n                                <button type=\"button\" className=\"btn btn-dark\" onClick={this.resetPoll}>Reset Poll</button> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\n                                <b className =\"form-check-label text-light\"> Most active user</b>\r\n                </div>\r\n                <div className=\"container my-3 mx-3 \" >\r\n                    <div className=\"row\" >\r\n                        <ul className=\"col-md-4 card list-group\" ref={(node) => (this.node = node)} style={mystyle}>\r\n                            <Chat msg={this.state.msg} subscriber={this.state.subscriber} />\r\n                        </ul>\r\n                        <div className=\"col-md-4 \" >\r\n                            \r\n                            <Poll msgCount={this.state.msgCount} />\r\n                        </div>\r\n                        <div className=\"col-md-3 mx-4 \" >\r\n                            <Users userCount={this.state.userCount} />\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","\nimport './App.css';\nimport React, { Component } from 'react'\nimport NavBar from './NavBar';\nimport Twich from './Twich';\n\n\nexport default class App extends Component {\n  constructor(){\n    super();\n    document.body.style.backgroundColor = '#042743';\n  }\n  render() {\n    return (\n      <div>\n        <NavBar/>\n        <Twich/>\n      </div>\n    )\n  }\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}